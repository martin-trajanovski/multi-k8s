name: Build and Deploy to GKE

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push client
        uses: docker/build-push-action@v3
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ghcr.io/martin-trajanovski/multi-k8s-client:latest
      - name: Build and push server
        uses: docker/build-push-action@v3
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ghcr.io/martin-trajanovski/multi-k8s-server:latest
      - name: Build and push worker
        uses: docker/build-push-action@v3
        with:
          context: ./worker
          file: ./worker/Dockerfile
          push: true
          tags: ghcr.io/martin-trajanovski/multi-k8s-worker:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      # Setup gcloud CLI
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      # Get the GKE credentials so we can deploy to the cluster
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      - id: 'apply-configs-and-get-pods'
        run: |
          kubectl apply -f k8s/
          kubectl get pods
